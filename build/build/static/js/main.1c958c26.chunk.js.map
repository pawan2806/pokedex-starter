{"version":3,"sources":["Card.js","serviceWorker.js","Cardlist.js","pokemon.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["Card","props","id","className","alt","src","name","type","Boolean","window","location","hostname","match","Cardlist","pokemon","cardComponent","map","user","i","key","Searchbox","seachfield","searchChange","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","filterPokemon","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLA4BeA,G,MA3BF,SAACC,GACb,OAAGA,EAAMC,IAAM,EAEd,yBAAKC,UAAU,8DACZ,yBAAKC,IAAI,UAAUC,IAAG,oEAA+DJ,EAAMC,GAArE,UACtB,6BACG,4BAAKD,EAAMK,MACX,2BAAG,sCAAeL,EAAMM,QAO9B,yBAAKJ,UAAW,6DACb,yBAAKC,IAAI,UAAUC,IAAG,mEAA8DJ,EAAMC,GAApE,UACtB,6BACG,4BAAKD,EAAMK,MACX,2BAAG,sCAAeL,EAAMM,UCPZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCESC,EAlBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACXC,EAAcD,EAAQE,KAAI,SAACC,EAAKC,GAErC,OACC,yBAAKf,UAAU,MACf,kBAAC,EAAD,CAAMgB,IAAKD,EAAGhB,GAAIY,EAAQI,GAAGhB,GAAII,KAAMQ,EAAQI,GAAGZ,KAAMC,KAAMO,EAAQI,GAAGX,WAI3E,OACC,yBAAKJ,UAAU,MACVY,ICbMD,EAAU,CACrB,CACEZ,GAAI,EACJI,KAAM,YACNC,KAAM,gBAER,CACEL,GAAI,EACJI,KAAM,UACNC,KAAM,gBAER,CACEL,GAAI,EACJI,KAAM,WACNC,KAAM,gBAER,CACEL,GAAI,EACJI,KAAM,cACNC,KAAM,QAER,CACEL,GAAI,EACJI,KAAM,cACNC,KAAM,SAER,CACEL,GAAI,EACJI,KAAM,YACNC,KAAM,eAER,CACEL,GAAI,EACJI,KAAM,WACNC,KAAM,SAER,CACEL,GAAI,EACJI,KAAM,YACNC,KAAM,SAER,CACEL,GAAI,EACJI,KAAM,YACNC,KAAM,SAER,CACEL,GAAI,GACJI,KAAM,YACNC,KAAM,OAER,CACEL,GAAI,GACJI,KAAM,UACNC,KAAM,OAER,CACEL,GAAI,GACJI,KAAM,YACNC,KAAM,eC3CKa,EAdE,SAAC,GAA8B,EAA7BC,WAA8B,IAAlBC,EAAiB,EAAjBA,aAE9B,OACC,yBAAKnB,UAAU,OACf,2BACIA,UAAU,8CACVI,KAAK,SACLgB,YAAY,kBACZC,SAAUF,MCCDG,G,MATA,SAACxB,GACf,OACC,yBAAKyB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC9D5B,EAAM6B,YCkCGC,E,kDA/Bd,aAAc,IAAD,8BACZ,gBAUDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAVxC,EAAKC,MAAM,CACVxB,QAAQA,EACFqB,YAAY,IAJP,E,qDAcJ,IAAD,OACDI,EAAcC,KAAKF,MAAMxB,QAAQ2B,QAAO,SAAA3B,GAC7C,OAAOA,EAAQR,KAAKoC,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEpE,OACC,yBAAKvC,UAAU,MACX,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWmB,aAAckB,KAAKR,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,QAASyB,U,GAxBPK,aCElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1c958c26.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (props) => {\r\n\tif(props.id <= 9) {\r\n\t\treturn (\r\n\t\t<div className='bg-light-yellow dib br4 pa3 ma2 grow fl w-20 bw2 shadow-5 '>\r\n\t\t   <img alt='POKEMON' src={`https://assets.pokemon.com/assets/cms2/img/pokedex/full/00${props.id}.png`}/>\r\n\t\t   <div>\r\n\t\t      <h2>{props.name}</h2>\r\n\t\t      <p><i>Type : </i>{props.type}</p>\r\n\t\t   </div>\r\n\t\t</div>\r\n\r\n\t);\r\n\t}  else {\r\n\t\treturn (\r\n\t\t<div className= 'bg-light-yellow dib br4 pa3 ma2 grow fl w-20 bw2 shadow-5'>\r\n\t\t   <img alt='POKEMON' src={`https://assets.pokemon.com/assets/cms2/img/pokedex/full/0${props.id}.png`}/>\r\n\t\t   <div>\r\n\t\t      <h2>{props.name}</h2>\r\n\t\t      <p><i>Type : </i>{props.type}</p>\r\n\t\t   </div>\r\n\t\t</div>\r\n\r\n\t);\r\n\r\n\t}\r\n}\r\n\r\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport Card from './Card'\r\nconst Cardlist =({pokemon})=> {\r\n\tconst cardComponent=pokemon.map((user,i)=> {\r\n\r\n\t\treturn(\r\n\t\t\t<div className='tc' >\r\n\t\t\t<Card key={i} id={pokemon[i].id} name={pokemon[i].name} type={pokemon[i].type}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\treturn (\r\n\t\t<div className='tc'   >\r\n\t\t    {cardComponent}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n\r\nexport default Cardlist;","export const pokemon = [\r\n  {\r\n    id: 1,\r\n    name: 'Bulbasaur',\r\n    type: 'Grass/Poison',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ivysaur',\r\n    type: 'Grass/Poison',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Venusaur',\r\n    type: 'Grass/Poison',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Charmander ',\r\n    type: 'Fire',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Charmeleon ',\r\n    type: ' Fire',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Charizard',\r\n    type: 'Fire/Flying',\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Squirtle',\r\n    type: 'Water',\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Wartortle',\r\n    type: 'Water',\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Blastoise',\r\n    type: 'Water',\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Caterpie ',\r\n    type: 'Bug',\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Metapod',\r\n    type: 'Bug',\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Butterpod',\r\n    type: 'Bug/Flying',\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst Searchbox =({seachfield, searchChange})=> {\r\n\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input\r\n\t\t    className='pa3 ba br4 b--light-yellow bg-washed-yellow'\r\n\t\t    type='search' \r\n\t\t    placeholder='search pokemons'\r\n\t\t    onChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react'\r\n\r\nconst Scroll = (props)=> {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border:'3px solid black', height:'550px'}}>\r\n\t\t   {props.children}\r\n\t\t</div>\r\n\t );\r\n};\r\n \r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport {pokemon} from './pokemon';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\tpokemon:pokemon,\r\n\t        searchfield:''\r\n\t\t}\r\n\t}\r\n\t// componentDidMount(){\r\n\t// \tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({pokemon:users}));\r\n\t// }\r\n\r\n\tonSearchChange=(event)=> {\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\t}\r\n\trender(){\r\n\t\tconst filterPokemon=this.state.pokemon.filter(pokemon => {\r\n\t\t\treturn pokemon.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t    <h1 className='f1'>Pokedex</h1>\r\n\t\t    <Searchbox searchChange={this.onSearchChange}/>\r\n\t\t    <Scroll>\r\n\t\t    <Cardlist pokemon={filterPokemon}/>\r\n\t\t    </Scroll>\r\n\t\t</div>\r\n\r\n\t);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\nimport {pokemon} from './pokemon';\n\nReactDOM.render(\n  <React.StrictMode>\n  \n    <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}